Description: >
    Create aLB with a public IP(Hostname) Healthcheck :80
    Create ASG which deployes 4x t2.micro in the private subnet
    Launch Configuration
    Two servers in each Private subnet (4 in total)
      Specs: 4GB RAM, 2vCPU, 10GB Disk, Ubuntu 18(pff..)
    IAM role for S3 pull
      # 1) Launch Config 1.1) Role for TargetGroup 1.2)Profile for Role  2)Security Group for Load Balancer 
        3)SecGroup for Instance 4)Target Group 5)LoadBalancer 6)ASG 
       7)Listener 
Parameters:

  EnvironmentName:
    Description: Match the network name
    Type: String
    Default: AVALANCHE

  AMI:
      Description: 'The Machine Image to be used. Please use an Ubuntu Machine Image Specific to your region. Default is set to an AMI
      in the us-west-2 region.'
      Type: String
      Default: ami-07a29e5e945228fa1
      
  InstanceType:
      Description: You might want to upscale later on
      Type: String
      Default: t2.micro

  KeyName: 
    Description: "Create the Key manually, or ssm"
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: BastionKey #The name of the key in the console
      

Resources:


   LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      ImageId: !Ref AMI
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      BlockDeviceMappings: 
      - DeviceName: /dev/sda1
        Ebs: 
          VolumeSize: 10
          VolumeType: gp2
      IamInstanceProfile: !Ref InstanceProfileRole
      SecurityGroups:
        - !Ref EC2SecGroup
      UserData:
       Fn::Base64: 
        Fn::Join: [ "", ["#!/bin/bash \n", "apt update -y \n", "sleep 15 \n", "apt upgrade -y \n", "sleep 15 \n", "apt-get install unzip awscli -y \n", "sleep 15 \n", "apt install -y apache2 \n", "systemctl enable --now apache2.service \n", "cd /var/www/html \n", "aws s3 cp s3://udacity-demo-aurond/udacity.zip . \n", "unzip -o udacity.zip \n" ] ]
   S3ReadRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

   InstanceProfileRole: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        - !Ref S3ReadRole
 # <-- Role, ProfileRole, LaunchConfig
 # ---> SecGroup for LB, Sec Group for Instance

   LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

   EC2SecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref LBSecGroup
          FromPort: 80
          ToPort: 80

        - IpProtocol: tcp
          SourceSecurityGroupId: 
            Fn::ImportValue: !Sub "${EnvironmentName}-BASTIONSecGroupID"
          FromPort: 22
          ToPort: 22  

    # <---- CREATE Target Group, Load Balancer, Listener and Profile Listener


   WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup


   AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: 
      - WebAppLB
    Properties:
      TargetType: instance  #the default is "instance" but we must use ip to forward to fargate
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

   ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'AppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]   #For lets say two paths
        ListenerArn: !Ref 'ALBListener'
        Priority: 1


   ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - WebAppLB
      - AppTargetGroup
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref AppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: 80
      Protocol: HTTP 

    #---> Create ASG, Scale UP and Down policies

   WebServASGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRI2-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRI1-SN"
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: '4'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: AppTargetGroup

   WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServASGroup
      Cooldown: '60'
      ScalingAdjustment: '1'

   WebServerScaleDownPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName:
          Ref: WebServASGroup
        Cooldown: '60'
        ScalingAdjustment: "-1"
    #---> Create Alarm High/Low based on CPU

   CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '90'
      AlarmActions:
      - Ref: WebServerScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebServASGroup
      ComparisonOperator: GreaterThanThreshold

   CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
      - Ref: WebServerScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebServASGroup
      ComparisonOperator: LessThanThreshold



Outputs:
  URL:
    Description: The URL of the website
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - WebAppLB
          - DNSName